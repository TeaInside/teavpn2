#!/bin/sh
#
# Thanks to liburing (https://github.com/axboe/liburing)
#

cc=${CC:-gcc}
cxx=${CXX:-g++}
ld=${LD:-$cc}

CONFIG_LINUX=y

USER_CFLAGS=${CFLAGS}
USER_CXXFLAGS=${CXXFLAGS}
USER_LDFLAGS=${LDFLAGS}
USER_LIB_LDFLAGS=${LIB_LDFLAGS}


if test -z "$CONFIG_IO_URING"; then
  CONFIG_IO_URING=y
fi

for opt do
  optarg=$(expr "x$opt" : 'x[^=]*=\(.*\)')
  case "$opt" in
  --help|-h) show_help=yes
  ;;
  --prefix=*) prefix="$optarg"
  ;;
  --includedir=*) includedir="$optarg"
  ;;
  --libdir=*) libdir="$optarg"
  ;;
  --libdevdir=*) libdevdir="$optarg"
  ;;
  --mandir=*) mandir="$optarg"
  ;;
  --datadir=*) datadir="$optarg"
  ;;
  --cc=*) cc="$optarg"
  ;;
  --cxx=*) cxx="$optarg"
  ;;
  --ld=*) ld="$optarg"
  ;;
  --cflags=*) USER_CFLAGS="$optarg"
  ;;
  --cxxflags=*) USER_CXXFLAGS="$optarg"
  ;;
  --ldflags=*) USER_LDFLAGS="$optarg"
  ;;
  --lib-ldflags=*) USER_LIB_LDFLAGS="$optarg"
  ;;
  --32-bit) USE_32_BIT=y
  ;;
  --gui) CONFIG_GUI=y
  ;;
  *)
    echo "ERROR: unknown option $opt"
    echo "Try '$0 --help' for more information"
    exit 1
  ;;
  esac
done

if test "$USE_32_BIT" = "y"; then
  USER_CFLAGS="-m32 ${USER_CFLAGS}";
  USER_CXXFLAGS="-m32 ${USER_CXXFLAGS}";
  USER_LDFLAGS="-m32 ${USER_LDFLAGS}";
fi

if test -z "$prefix"; then
  prefix=/usr
fi
if test -z "$includedir"; then
  includedir="$prefix/include"
fi
if test -z "$libdir"; then
  libdir="$prefix/lib"
fi
if test -z "$libdevdir"; then
  libdevdir="$prefix/lib"
fi
if test -z "$mandir"; then
  mandir="$prefix/man"
fi
if test -z "$datadir"; then
  datadir="$prefix/share"
fi

if test x"$libdir" = x"$libdevdir"; then
  relativelibdir=""
else
  relativelibdir="$libdir/"
fi

if test "$show_help" = "yes"; then
cat <<EOF

Usage: configure [options]
Options: [defaults in brackets after descriptions]
  --help                   print this message
  --prefix=PATH            install in PATH [$prefix]
  --includedir=PATH        install headers in PATH [$includedir]
  --libdir=PATH            install runtime libraries in PATH [$libdir]
  --libdevdir=PATH         install development libraries in PATH [$libdevdir]
  --mandir=PATH            install man pages in PATH [$mandir]
  --datadir=PATH           install shared data in PATH [$datadir]
  --cc=CMD                 use CMD as the C compiler
  --cxx=CMD                use CMD as the C++ compiler
  --ld=CMD                 use CMD as the linker
  --cflags=FLAGS           set C compiler flags
  --cxxflags=FLAGS         set C++ compiler flags
  --ldflags=FLAGS          set linker flags
  --lib-ldflags=FLAGS      set library linker flags (end of the command)
  --32-bit                 set 32-bit build flags
  --gui                    compile with GUI support (GTK-3)
EOF
exit 0
fi

TMP_DIRECTORY="$(mktemp -d)"
TMPC="$TMP_DIRECTORY/tmpfile.c"
TMPC2="$TMP_DIRECTORY/tmpfile-2.c"
TMPO="$TMP_DIRECTORY/tmpfile.o"
TMPE="$TMP_DIRECTORY/tmpfile.exe"

touch $TMPC $TMPC2 $TMPO $TMPE
# NB: do not call "exit" in the trap handler; this is buggy with some shells;
# see <1285349658-3122-1-git-send-email-loic.minier@linaro.org>
trap "rm -rf $TMP_DIRECTORY" EXIT INT QUIT TERM

config_host_mak="config-host.mak"
config_host_h="config-host.h"

rm -rf config.log
rm -rf $config_host_mak
rm -rf $config_host_h

fatal() {
  echo $@
  echo "Configure failed, check config.log and/or the above output"
  rm -rf $config_host_mak
  rm -rf $config_host_h
  exit 1
}

# Print result for each configuration test
print_config() {
  printf "%-30s%s\n" "$1" "$2"
}

# Default CFLAGS
CFLAGS="${USER_CFLAGS}";
CXXFLAGS="${USER_CFLAGS}";
LDFLAGS="${USER_LDFLAGS}";
LIB_LDFLAGS="${USER_LIB_LDFLAGS}";

# Print configure header at the top of $config_host_h
echo "/*" > $config_host_h
echo " * Automatically generated by configure - do not modify" >> $config_host_h
printf " * Configured with:" >> $config_host_h
printf " * '%s'" "$0" "$@" >> $config_host_h
echo "" >> $config_host_h
echo " */" >> $config_host_h

echo "# Automatically generated by configure - do not modify" > $config_host_mak
printf "# Configured with:" >> $config_host_mak
printf " '%s'" "$0" "$@" >> $config_host_mak
echo >> $config_host_mak

do_cxx() {
  # Run the compiler, capturing its output to the log.
  echo $cxx "$@" >> config.log
  $cxx "$@" >> config.log 2>&1 || return $?
  return 0
}

do_cc() {
  # Run the compiler, capturing its output to the log.
  echo $cc "$@" >> config.log
  $cc "$@" >> config.log 2>&1 || return $?
  # Test passed. If this is an --enable-werror build, rerun
  # the test with -Werror and bail out if it fails. This
  # makes warning-generating-errors in configure test code
  # obvious to developers.
  if test "$werror" != "yes"; then
    return 0
  fi
  # Don't bother rerunning the compile if we were already using -Werror
  case "$*" in
    *-Werror*)
       return 0
    ;;
  esac
  echo $cc -Werror "$@" >> config.log
  $cc -Werror "$@" >> config.log 2>&1 && return $?
  echo "ERROR: configure test passed without -Werror but failed with -Werror."
  echo "This is probably a bug in the configure script. The failing command"
  echo "will be at the bottom of config.log."
  fatal "You can run configure with --disable-werror to bypass this check."
}

compile_prog() {
  local_cflags="$1";
  local_ldflags="$2 $LIBS";
  echo "Compiling test case $3" >> config.log;
  do_cc -D_GNU_SOURCE $CFLAGS $local_cflags -o $TMPE $TMPC $LDFLAGS $local_ldflags;
}

compile_prog_cxx() {
  local_cflags="$1";
  local_ldflags="$2 $LIBS";
  echo "Compiling test case $3" >> config.log;
  do_cxx -D_GNU_SOURCE $CXXFLAGS $local_cflags -o $TMPE $TMPC $LDFLAGS $local_ldflags;
}

has() {
  type "$1" >/dev/null 2>&1
}

output_mak() {
  echo "$1=$2" >> $config_host_mak
}

output_sym() {
  output_mak "$1" "y"
  echo "#define $1" >> $config_host_h
}

print_and_output_mak() {
  print_config "$1" "$2"
  output_mak "$1" "$2"
}
print_and_output_mak "prefix" "$prefix"
print_and_output_mak "includedir" "$includedir"
print_and_output_mak "libdir" "$libdir"
print_and_output_mak "libdevdir" "$libdevdir"
print_and_output_mak "relativelibdir" "$relativelibdir"
print_and_output_mak "mandir" "$mandir"
print_and_output_mak "datadir" "$datadir"


########################################################################
# Check HPC Emergency Support
#
# Currently it's only supported for Linux x86-64.
#
if test -z "$CONFIG_HPC_EMERGENCY"; then

  CONFIG_HPC_EMERGENCY="no"
  cat > $TMPC << EOF
#if !defined(__x86_64__) || !defined(__linux__)
#error "HPC emergency is not supported."
#endif
int main(void)
{
  return 0;
}
EOF

  if compile_prog "" "" "CONFIG_HPC_EMERGENCY"; then
    CONFIG_HPC_EMERGENCY="y"
  fi
fi # if test -z "$CONFIG_HPC_EMERGENCY";
########################################################################



########################################################################
#
# Get the compiler type. We only support GCC and Clang!
#
if printf "" | "$cc" -dM -E - | grep __clang__ >> config.log; then
  CC_TYPE=__clang
else
  if printf "" | "$cc" -dM -E - | grep __GNUC__ >> config.log; then
    CC_TYPE=__gcc
  else
    echo "CC is not supported, current CC is \"$cc\"";
    exit 1;
  fi
fi
print_config "CC_TYPE" "$CC_TYPE";
echo "CC_TYPE := $CC_TYPE" >> $config_host_mak;


if printf "" | "$cxx" -dM -E - | grep __clang__ >> config.log; then
  CXX_TYPE=__clang
else
  if printf "" | "$cxx" -dM -E - | grep __GNUC__ >> config.log; then
    CXX_TYPE=__gcc
  else
    echo "CXX is not supported, current CXX is \"$cxx\"";
    exit 1;
  fi
fi
print_config "CXX_TYPE" "$CXX_TYPE";
echo "CXX_TYPE := $CXX_TYPE" >> $config_host_mak;
########################################################################


########################################################################
#
# Get current git commit sha1.
#
GIT_HASH=$(git log --pretty="%H" -1)
if test ! -z "$GIT_HASH"; then
  echo "GIT_HASH := $GIT_HASH" >> $config_host_mak;
  echo "EXTRAVERSION := \$(EXTRAVERSION)-\$(GIT_HASH)" >> $config_host_mak;
  print_config "GIT_HASH" "$GIT_HASH";
else
  print_config "GIT_HASH" "cannot get commit sha1";
fi
########################################################################

if test "$CONFIG_GUI" = "y"; then
  output_sym "CONFIG_GUI";
fi;
print_config "CONFIG_GUI" "$CONFIG_GUI";

if test "$CONFIG_LINUX" = "y"; then
  output_sym "CONFIG_LINUX";
fi;
print_config "CONFIG_LINUX" "$CONFIG_LINUX";

if test "$CONFIG_IO_URING" = "y"; then
  output_sym "CONFIG_IO_URING";
fi;
print_config "CONFIG_IO_URING" "$CONFIG_IO_URING";

if test "$CONFIG_HPC_EMERGENCY" = "y"; then
  output_sym "CONFIG_HPC_EMERGENCY";
fi;
print_config "CONFIG_HPC_EMERGENCY" "$CONFIG_HPC_EMERGENCY";

echo "CC := $cc" >> $config_host_mak;
print_config "CC" "$cc";
echo "CXX := $cxx" >> $config_host_mak;
print_config "CXX" "$cxx";
echo "LD := $ld" >> $config_host_mak;
print_config "LD" "$ld";

echo "CFLAGS := $CFLAGS" >> $config_host_mak;
print_config "USER_CFLAGS" "$USER_CFLAGS";

echo "CXXFLAGS := $CXXFLAGS" >> $config_host_mak;
print_config "USER_CXXFLAGS" "$USER_CXXFLAGS";

echo "LDFLAGS := $LDFLAGS" >> $config_host_mak;
print_config "USER_LDFLAGS" "$USER_LDFLAGS";

echo "LIB_LDFLAGS := $LIB_LDFLAGS" >> $config_host_mak;
print_config "USER_LIB_LDFLAGS" "$USER_LIB_LDFLAGS";
echo "---------------------------------------------------------------";
